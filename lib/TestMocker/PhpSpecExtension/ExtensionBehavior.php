<?php

namespace TestMocker\PhpSpecExtension;

use PhpSpec\ObjectBehavior;
use PhpSpec\Wrapper\Subject;
use TestMocker\MockCallManager;

/**
 * @method MockCallManager mockMethod($method, $returnValue = null)
 * @method MockCallManager mockFunction($function, $namespace, $returnValue = null)
 * @method MockCallManager cleanMockCalls()
 * @method mixed getCalls($callable, $index = null)
 */
class ExtensionBehavior extends ObjectBehavior
{
    /**
     * @var MockCallManager
     */
    protected $mockCallManager;
//    public function getMatchers()
//    {
//        return parent::getMatchers(); // TODO: Change the autogenerated stub
//    }

//    public function setSpecificationSubject(Subject $subject)
//    {
//        printf("\n%s: %s\n", __FUNCTION__, get_class($subject));
//        parent::setSpecificationSubject($subject); // TODO: Change the autogenerated stub
////        $this->beAnInstanceOf('spec\Battleships\Http\HttpClient');
//    }

//    /**
//     * @param string $className
//     * @param array $arguments
//     */
//    public function beAnInstanceOf($className, array $arguments = array())
//    {
//        printf("\n%s: %s\n", __FUNCTION__, $className);
//        $this->object->beAnInstanceOf($className, $arguments);
//    }

    /**
     * @param string $name
     * @param array $args
     * @return mixed
     */
    public function __call($name, array $args)
    {
//        echo PHP_EOL.  debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 3)[2]['function'];
        if (method_exists($this->mockCallManager, $name)) {
            $mockResponse = call_user_func_array([$this->mockCallManager, $name], $args);
            if ($mockResponse instanceof MockCallManager) {
                return $mockResponse;
            }
            $this->__set('mockResponse', $mockResponse);
//            printf("\nMock Response %s: %s\n", __FUNCTION__, get_class($this->mockResponse));
//            printf("\nMock Response %s: %s\n", __FUNCTION__, get_class($this->object));

            return $this->__get('mockResponse');
        }

        return parent::__call($name, $args);
    }

    /**
     * @param MockCallManager $mockCallManager
     */
    public function setMockCallManager(MockCallManager $mockCallManager)
    {
        $this->mockCallManager = $mockCallManager;
    }
}
